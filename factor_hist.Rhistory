head(tst)
Return.portfolio(na.omit(lse.wCoe), weights = w_wCoe/sum(w_wCoe)) -> tst4
head(tst4)
sharpeDecomp = function(port, weights=NULL){
library(PerformanceAnalytics);
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = Return.portfolio(port, weights = weights, geometric = F);
port.sd = StdDev.annualized(port.ret)[1,1];
ind.sd = StdDev.annualized(port, portfolio_method = "single")[1,];
ind.sharpe = SharpeRatio.annualized(port)[1,];
ind.corToPort = table.Correlation(port, port.ret)[,1];
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd;
componentSharpe = ind.sharpe * (1/ind.corToPort);
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe);
rownames(result) = c('Weights','WeightedRisk', 'CorrToPort', 'DiversBenefits', 'IndivSharpe', 'CompSharpe', 'ContributionToSharpe');
return(result);
}
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe/(w_wCoe %>% sum()))
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe/(w_wCoe %>% sum()))[7,]
(lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe/(w_wCoe %>% sum())))[7,]
(lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe/(w_wCoe %>% sum())))[7,] %>% sum()
lse.wCoe %>% na.omit() %>% Return.portfolio(w_wCoe/sum(w_wCoe), geometric = F)
lse.wCoe %>% na.omit() %>% Return.portfolio(w_wCoe/sum(w_wCoe), geometric = F) %>% SharpeRatio.annualized()
lse.wCoe %>% na.omit() %>% Return.portfolio(weights = w_wCoe/sum(w_wCoe), geometric = F) %>% SharpeRatio.annualized(
)
lse.wCoe %>% na.omit() %>% Return.portfolio(.,w_wCoe/sum(w_wCoe), geometric = F) %>% SharpeRatio.annualized()
SharpeRatio.annualized()
SharpeRatio.annualized
xts(apply(na.omit(lse.wCoe), MARGIN = 1, function(x)return(sum(x*w_wCoe/sum(w_wCoe)))), order.by = index(na.omit(lse.wCoe)))
lse.wCoe %>% na.omit() %>% apply(1, function(x)return(sum(x*w_wCoe/sum(w_wCoe)))) %>% xts(order.by = index(lse.wCoe %>% na.omit()))
lse.wCoe %>% na.omit() %>% apply(1, function(x)return(x%*%w_wCoe/sum(w_wCoe))) %>% xts(order.by = index(lse.wCoe %>% na.omit()))
?geometric.return
loadedNamespaces()
Return.geometric
return.geometric
geometric.ret
mean.geometric
port
port = lse.wCoe %>% na.omit()
(port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252
(port %>% apply( MARGIN = 2, FUN = function(x)return(((1+x) %>% log() %>% mean() %>% exp())-1)))
(port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 -1
Return.annualized(port)
system.time(Return.annualized(port))
system.time((port %>% apply( MARGIN = 2, FUN = function(x)return(((1+x) %>% log() %>% mean() %>% exp())-1))))
system.time((port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 -1)
system.time(Return.annualized(port))
system.time((port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 -1)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
(ind.ret - Rf)/ind.sd
(ind.ret - 0)/ind.sd
SharpeRatio(na.omit(lse.wCoe))
SharpeRatio.annualized(na.omit(lse.wCoe))
system.time(SharpeRatio.annualized(na.omit(lse.wCoe)))
system.time((ind.ret - 0)/ind.sd)
ret.wCoe
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
x
port.ret = port %>% apply(1, function(x)return(sum(x*weights))) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
weights
port.ret = port %>% apply(1, function(x)return(sum(x*w_wCoe/sum(w_wCoe)))) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
port.ret
port.sd
mean.geometric(port.ret)
mean.geometric(port.ret+1)
mean.geometric(port.ret)
(mean.geometric(port.ret)+1)^252 -1
((mean.geometric(port.ret)+1)^252 -1)/port.sd
SharpeRatio.annualized(port.ret)
table.CalendarReturns(port, port.ret)
table.Correlation(port, port.ret)
table.Correlation(port, port.ret)[,1]
sharpeDecomp = function(port, weights=NULL, Rf = 0){
require(PerformanceAnalytics)
require(magrittr)
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
rownames(result) = c('Weights','WeightedRisk', 'CorrToPort', 'DiversBenefits', 'IndivSharpe', 'CompSharpe', 'ContributionToSharpe')
return(result);
}
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe)
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe)->lse.sharpe.wCoe
sum(lse.sharpe.wCoe[7,])
sum(lse.sharpe.wCoe[1,])
sum(lse.sharpe.wCoe[2,])
sum(lse.sharpe.wCoe[3,])
sum(lse.sharpe.wCoe[4,])
sum(lse.sharpe.wCoe[5,])
sum(lse.sharpe.wCoe[6,])
sum(lse.sharpe.wCoe[7,])
SharpeRatio.annualized(port)
SharpeRatio.annualized(port.ret)
sharpeDecomp = function(port, weights=NULL, Rf = 0){
require(PerformanceAnalytics)
require(magrittr)
if(is.null(weights))
weights = rep(1/ncol(port), ncol(port))
weights = weights/sum(weights)
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
rownames(result) = c('Weights','WeightedRisk', 'CorrToPort', 'DiversBenefits', 'IndivSharpe', 'CompSharpe', 'ContributionToSharpe')
return(result);
}
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe)->lse.sharpe.wCoe
sum(lse.sharpe.wCoe[7,])
sharpeDecomp = function(port, weights=NULL, Rf = 0){
require(PerformanceAnalytics)
require(magrittr)
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
rownames(result) = c('Weights','WeightedRisk', 'CorrToPort', 'DiversBenefits', 'IndivSharpe', 'CompSharpe', 'ContributionToSharpe')
return(result);
}
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe)->lse.sharpe.wCoe
sum(lse.sharpe.wCoe[7,])
weights = w_wCoe
weights
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
Rf = 0
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = port %>% apply(1, function(x)return(x %*% weights)) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply( MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^252 - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
result
lse.sharpe.wCoe
sum(lse.sharpe.wCoe[6,])
ind.ret = (port %>% apply(MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^(252/nrow(port)) - 1
ind.ret
ind.ret*100
ind.ret = (port %>% apply(MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^(252) - 1
ind.ret*100
Return.annualized(na.omit(lse.wCoe))
StdDev.annualized(na.omit(lse.wCoe))
ind.sd
ind.corToPort
ind.sd*ind.corToPort*weights/port.sd
sum(ind.riskWeight)
ind.sharpe
SharpeRatio.annualized(na.omit(lse.wCoe))
sharpeDecomp = function(port, weights=NULL, Rf = 0){
require(PerformanceAnalytics)
require(magrittr)
if(is.null(weights)){
weights = rep(1/ncol(port), ncol(port))
}else{
weights = weights/sum(weights)
}
port.ret = port %>% apply(1, function(x)return(sum(x*weights))) %>% xts(order.by = index(port))
port.sd = (port.ret %>% sd())*sqrt(252)
ind.ret = (port %>% apply(MARGIN = 2, FUN = function(x)return((1+x) %>% log() %>% mean() %>% exp())))^(252) - 1
ind.sd = (port %>% apply( MARGIN = 2, FUN = sd))*sqrt(252)
ind.sharpe = (ind.ret - Rf)/ind.sd
ind.corToPort = table.Correlation(port, port.ret)[,1]
ind.riskWeight = ind.sd*ind.corToPort*weights/port.sd
componentSharpe = ind.sharpe * (1/ind.corToPort)
result = rbind(weights, ind.riskWeight, ind.corToPort, 1/ind.corToPort, ind.sharpe, componentSharpe, ind.riskWeight*componentSharpe)
rownames(result) = c('Weights','WeightedRisk', 'CorrToPort', 'DiversBenefits', 'IndivSharpe', 'CompSharpe', 'ContributionToSharpe')
return(result)
}
lse.wCoe %>% na.omit() %>% sharpeDecomp(weights = w_wCoe)->lse.sharpe.wCoe
lse.sharpe.wCoe
sum(lse.sharpe.wCoe[7,])
lse.sharpe.wCoe[2,1]*lse.sharpe.wCoe[6,1]
lse.sharpe.wCoe[2,2]*lse.sharpe.wCoe[6,2]
SharpeRatio.annualized(na.omit(lse.wCoe), geometric = F)
sum(SharpeRatio.annualized(na.omit(lse.wCoe), geometric = F))
save.image("~/GitHub/R-risk-mgmt/RM_Workspace.RData")
install.packages("PApages", repos="http://R-Forge.R-project.org")
context("Test fitTsfm")
context("Test fitTsfm")
require(testthat)
test_that("fitTsfm is as expected", {
fpath <- system.file("extdata", "timeSeriesReturns.csv",
package="factorAnalytics")
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
returns.z <- window(returns.z, start="2008-01-01", end="2012-12-31")
assets <- names(returns.z)[1:30]
ex.rets <- returns.z[,assets]-returns.z$rf
carhart <- returns.z[,c("mktrf","smb","hml","umd")]
# fit Carhart 4-factor model using lm
ff4 <- lm(ex.rets ~ carhart)
sum4 = summary(ff4)
rsq4 <- as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
Sigma.F <- var(carhart)
beta.hat <- coef(ff4)[-1,]
Sigma.eps <- diag(as.numeric(sapply(X = sum4, FUN = "[", "sigma")))
Sigma.R <- t(beta.hat) %*% Sigma.F %*% beta.hat + Sigma.eps^2
# fit Carhart 4-factor mode via fitTsfm
ff.mod <- fitTsfm(asset.names=assets,
factor.names=c("mktrf","smb","hml","umd"),
data=cbind(ex.rets,carhart))
# compare beta and r2
expect_that(as.matrix(ff.mod$beta),is_equivalent_to(t(coef(ff4)[-1,])))
expect_that(as.numeric(ff.mod$r2),
equals(as.numeric(sapply(X=sum4, FUN="[", "r.squared"))))
})
fpath <- system.file("extdata", "timeSeriesReturns.csv",
package="factorAnalytics")
fpath
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
library(zoo)
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
returns.z
head(returns.z)
window(returns.z, start = "2008-01-01", end = "2012-12-31")
names(returns.z)
names(returns.z)[1:30]
names(returns.z)[1:30] -> assets
ex.rets <- returns.z[,assets] - returns.z$rf
carhart <- returns.z[,c("mktrf","smb","hml","umd")]
?r.squared
library(testit)
?testit
??testit
install.packages("testthat")
context("Test fitTsfm")
require(testthat)
test_that("fitTsfm is as expected", {
fpath <- system.file("extdata", "timeSeriesReturns.csv",
package="factorAnalytics")
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
returns.z <- window(returns.z, start="2008-01-01", end="2012-12-31")
assets <- names(returns.z)[1:30]
ex.rets <- returns.z[,assets]-returns.z$rf
carhart <- returns.z[,c("mktrf","smb","hml","umd")]
# fit Carhart 4-factor model using lm
ff4 <- lm(ex.rets ~ carhart)
sum4 = summary(ff4)
rsq4 <- as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
Sigma.F <- var(carhart)
beta.hat <- coef(ff4)[-1,]
Sigma.eps <- diag(as.numeric(sapply(X = sum4, FUN = "[", "sigma")))
Sigma.R <- t(beta.hat) %*% Sigma.F %*% beta.hat + Sigma.eps^2
# fit Carhart 4-factor mode via fitTsfm
ff.mod <- fitTsfm(asset.names=assets,
factor.names=c("mktrf","smb","hml","umd"),
data=cbind(ex.rets,carhart))
# compare beta and r2
expect_that(as.matrix(ff.mod$beta),is_equivalent_to(t(coef(ff4)[-1,])))
expect_that(as.numeric(ff.mod$r2),
equals(as.numeric(sapply(X=sum4, FUN="[", "r.squared"))))
})
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
returns.z <- window(returns.z, start="2008-01-01", end="2012-12-31")
assets <- names(returns.z)[1:30]
ex.rets <- returns.z[,assets]-returns.z$rf
carhart <- returns.z[,c("mktrf","smb","hml","umd")]
ff4 <- lm(ex.rets ~ carhart)
sum4 = summary(ff4)
rsq4 <- as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
r.squared
[r.squared]
[r.squared
as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
?sapply
?[
sum4
sum4[1]["r.squared"]
sum4[[1]]["r.squared"]
sum4[[12]]["r.squared"]
sum4[[30]]["r.squared"]
rsq4
carhart
var(carhart)
ff4
coef(ff4)
coef(ff4)
ff4 <- lm(ex.rets ~ carhart)
sum4 = summary(ff4)
rsq4 <- as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
Sigma.F <- var(carhart)
beta.hat <- coef(ff4)[-1,]
Sigma.eps <- diag(as.numeric(sapply(X = sum4, FUN = "[", "sigma")))
Sigma.R <- t(beta.hat) %*% Sigma.F %*% beta.hat + Sigma.eps^2
library(factorAnalytics)
ff.mod = fitTsfm(asset.names = assets,  factor.names=c("mktrf","smb","hml","umd"),
data=cbind(ex.rets,carhart))
expect_that(as.matrix(ff.mod$beta),is_equivalent_to(t(coef(ff4)[-1,])))
test_that("fitTsfm is as expected", {
fpath <- system.file("extdata", "timeSeriesReturns.csv",
package="factorAnalytics")
returns.z <- read.zoo(file=fpath, header=TRUE, sep=",", as.is=TRUE,
FUN=as.yearmon)
returns.z <- window(returns.z, start="2008-01-01", end="2012-12-31")
assets <- names(returns.z)[1:30]
ex.rets <- returns.z[,assets]-returns.z$rf
carhart <- returns.z[,c("mktrf","smb","hml","umd")]
# fit Carhart 4-factor model using lm
ff4 <- lm(ex.rets ~ carhart)
sum4 = summary(ff4)
rsq4 <- as.numeric(sapply(X = sum4, FUN = "[", "r.squared"))
Sigma.F <- var(carhart)
beta.hat <- coef(ff4)[-1,]
Sigma.eps <- diag(as.numeric(sapply(X = sum4, FUN = "[", "sigma")))
Sigma.R <- t(beta.hat) %*% Sigma.F %*% beta.hat + Sigma.eps^2
# fit Carhart 4-factor mode via fitTsfm
ff.mod <- fitTsfm(asset.names=assets,
factor.names=c("mktrf","smb","hml","umd"),
data=cbind(ex.rets,carhart))
# compare beta and r2
expect_that(as.matrix(ff.mod$beta),is_equivalent_to(t(coef(ff4)[-1,])))
expect_that(as.numeric(ff.mod$r2),
equals(as.numeric(sapply(X=sum4, FUN="[", "r.squared"))))
})
ff.mod
ff.mod$beta
t(coef(ff4)[-1,])
data("managers")
managers
head(managers)
tail(managers)
data(edhec)
edhec
??edhec
library(PerformanceAnalytics)
data("edhec")
edhec
tail(edhec)
head(edhec)
start(edhec)
start(managers$HAM1)
end(edhec)
end(managers$HAM1)
library(magrittr)
managers$HAM1 %>% merge.xts(., edhec, order.by = index(edhec))
library(xts)
h1 = as.xts(managers$HAM1)
h1
h1 %>% merge.xts(., as.xts(edhec), order.by = index(as.xts(edhec)))
as.xts(edhec)
index(edhec)
index(h1)
merge.xts(h1, as.xts(edhec))
merge.xts(h1, as.xts(edhec))->myData
names(myData)
asset = names(myData)[1]
myData[,-asset]
myData[,-c(asset)]
myData[,-1]
names(myData[,-1])
names(myData[,-1])->bms
head(myData)
myData <- myData %>% na.omit()
head(myData)
tail(myData)
nrow(myData)
myData.train = myData[1:100,]
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train)
myMod
summary(myMod)
names(managers)
merge.xts(myData, managers$SP500.TR)->myData
names(myData)
head(myData)
nrow(myData)
merge.xts(myData, managers$US.10Y.TR)->myData
myData %>% na.omit() -> myData
myData %>% head()
myData.train = myData[1:100,]
ncol(myData)
bms = names(myData[,-1])
bns
bms
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train)
summary(myMod)
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train, variable.selection = "stepwise")
summary(myMod)
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train, variable.selection = "subsets")
summary(myMod)
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train, variable.selection = "subsets")
summary(myMod)
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train, variable.selection = "lars")
myMod = fitTsfm(asset.names = asset, factor.names = bms, data = myData.train, variable.selection = "stepwise")
summary(myMod)
nrow(myData)
nrow(myData.train)
myData.test = myData[101:120,]
predict(myMod, newdata = myData.test)
predict(myMod, newdata = myData.test) %>% as.xts()
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts()
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts() %>% cbind(., myData.test$HAM1)
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts()
myData.test$HAM1
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts() %>% merge.xts(myData.test$HAM1)
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts() %>% merge.xts(myData.test$HAM1, order.by = myData.test$HAM1)
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts() %>% merge.xts(myData.test$HAM1, order.by = index(myData.test$HAM1))
predict(myMod, newdata = myData.test)$HAM1 %>% as.xts() %>% merge.xts(myData.test$HAM1, order.by = index(myData.test$HAM1))
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.xts()
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.vector()
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.vector() %>% t()
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.xts()
index(myData.test)
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.xts() %>% merge.xts(as.xts(as.vector(myData.test$HAM1)))
predict(myMod, newdata = myData.test[,-1])$HAM1 %>% as.xts() -> myPrediction
merge.xts(myPrediction, as.xts(myData.test$HAM1, order.by = index(myPrediction)))
merge.xts(myPrediction, xts(myData.test$HAM1, order.by = index(myPrediction)))
plot(myPrediction, type = 'l')
lines(myData.test$HAM1)
plot(myPrediction, type = 'l', ylim=c(-0.02, 0.05))
lines(myData.test$HAM1)
plot(cum(myPrediction), type = 'l', ylim=c(-0.02, 0.05))
Return.cumulative(myPrediction)
cumprod(1+myPrediction)
plot(cumprod(1+myPrediction), type = 'l', ylim=c(-0.02, 0.05))
plot(cumprod(1+myPrediction), type = 'l')
lines(cumprod(1+myData.test$HAM1))
na.omit(managers)
na.omit(managers) %>% nrow()
na.omit(managers[1:2,]) %>% nrow()
na.omit(managers[,1:2]) %>% nrow()
na.omit(managers[,1:3]) %>% nrow()
na.omit(managers[,1:4]) %>% nrow()
na.omit(managers[,1:5]) %>% nrow()
myData.train = na.omit(managers[,1:4])
myData = na.omit(managers[,1:4])
myData
myData <- merge.xts(myData, managers$SP500.TR)
myData
edhec
myData <- merge.xts(myData, managers$US.10Y.TR)
myData
myData %>% na.omit() %>% myData
myData %>% na.omit() -> myData
head(myData)
myData <- merge.xts(myData, edhec)
myData
myData %>% na.omit() -> myData
myData
nrow(myData)
myData.train = myData[1:90,]
myData.test = myData[91:120,]
names(myData.test)
assets = names(myData[,1:4])
bms = names(myData[,5:19])
bms
myMod = fitTsfm(asset.names = assets, factor.names = bms, data = myData.train, variable.selection = "stepwise")
myMod
summary(myMod)
plot(myMod)
fitted(myMod)
plot(myMod)
plot(myMod, plot.single = F)
plot(myMod, plot.single = T, asset.name = "HAM1")
save.image("~/GitHub/R-risk-mgmt/factor_ws.RData")
savehistory("~/GitHub/R-risk-mgmt/factor_hist.Rhistory")
