out.var = t(weights[names(R)]) %*% (na.fill(model$beta[names(R),],0) %*% cov(newFactorData[,model$factor.names]) %*% t(na.fill(model$beta[names(R),],0)) + diag(model$resid.sd[names(R)]))%*% weights[names(R)]
return(sqrt(out.var))
}
factor.sd(R = lse.full.w, w, m, sp.sectors.w)
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2016'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2015'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2014'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2013'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2011'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2009'])
factor.sd(R = lse.full.w, w, m, sp.sectors.w['2008'])
lse = lse.full.w
factors = sp.sectors.w
model = lse.model.w$`2016-03-18`
fund.names = names(lse)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
# minETL.95 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.95))
# minETL.98 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.98))
minFactSD = add.objective(portfolio = pspec, type = 'risk', name = factor.sd, arguments = list(model = model,newFactorData = factors))
opt_minFactSD = optimize.portfolio(R=lse, portfolio = minFactSD, optimize_method = "random", search_size = 1000, trace = T)
minFactSD = add.objective(portfolio = pspec, type = "risk", name = "factor.sd", arguments = list(model = model,newFactorData = factors))
opt_minFactSD = optimize.portfolio(R=lse, portfolio = minFactSD, optimize_method = "random", search_size = 1000, trace = T)
opt_minFactSD
sp.sectors.w
sp.sectors.w %>% head
opt_minFactSD = optimize.portfolio(R=lse, portfolio = minFactSD, optimize_method = "random", search_size = 10000, trace = T)
opt_minFactSD
plot(opt_minFactSD, neighbors = 25)
opt_minFactSD = optimize.portfolio(R=lse, portfolio = minFactSD, optimize_method = "random", search_size = 20000, trace = T)
opt_minFactSD
lse.full %>% nrow()
head(lse.full)
head(lse)
factor.sd = function(R, weights, betas, residual.sd, newFactorData)
{
out.var = t(weights) %*% (na.fill(betas,0) %*% cov(newFactorData) %*% t(na.fill(betas,0)) + diag(residual.sd))%*% weights
return(sqrt(out.var))
}
model$beta
R = lse.full.w
factors = sp.sectors.w
model = lse.model.w$`2016-03-18`
betas = model$beta[names(R), names(factors)]
model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
res.sd
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),]
factors = sp.sectors
model = rollTsfm2(assets = R, factors = factors, variable.selection = "subsets", window = nrow(R), on = "days")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
# minETL.95 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.95))
# minETL.98 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.98))
minFactSD = add.objective(portfolio = pspec, type = "risk", name = "factor.sd", arguments = list(betas = betas, residual.sd = res.sd, newFactorData = factors))
opt_minFactSD = optimize.portfolio(R=R, portfolio = minFactSD, optimize_method = "random", search_size = 10000, trace = T)
warnings()
R
R %>% head
opt_minFactSD
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-c("MiscLSE")]
factors = sp.sectors
model = rollTsfm2(assets = R, factors = factors, variable.selection = "subsets", window = nrow(R), on = "days")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
# minETL.95 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.95))
# minETL.98 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.98))
minFactSD = add.objective(portfolio = pspec, type = "risk", name = "factor.sd", arguments = list(betas = betas, residual.sd = res.sd, newFactorData = factors))
opt_minFactSD = optimize.portfolio(R=R, portfolio = minFactSD, optimize_method = "random", search_size = 10000, trace = T)
warnings()
opt_minFactSD
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-c("MiscLSE")]
R
R %>% head
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
factors = sp.sectors
model = rollTsfm2(assets = R, factors = factors, variable.selection = "subsets", window = nrow(R), on = "days")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
# minETL.95 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.95))
# minETL.98 = add.objective(portfolio = pspec, type = 'risk', name = 'ETL', arguments = list(p=0.98))
minFactSD = add.objective(portfolio = pspec, type = "risk", name = "factor.sd", arguments = list(betas = betas, residual.sd = res.sd, newFactorData = factors))
opt_minFactSD = optimize.portfolio(R=R, portfolio = minFactSD, optimize_method = "random", search_size = 10000, trace = T)
opt_minFactSD
model
predict(model, sp.sectors)
predict(model, sp.sectors) -> model.pred
model.pred$Apis %>% unlist
model.pred$Apis %>% unlist %>% as.xts
length(model.pred)
result = as.xts(unlist(model.pred[[1]]]))
result = as.xts(unlist(model.pred[[1]]))
combinePredictions = function(model, newData)
{
model.pred = predict(model, newData)
result = as.xts(unlist(model.pred[[1]]))
for(i in 2:length(model.pred))
{
result = cbind(result, as.xts(unlist(model.pred[[i]])))
}
return(result)
}
combinePredictions(model, sp.sectors)
combinePredictions(model, sp.sectors) %>% nrow
combinePredictions(model, sp.sectors) %>% head
combinePredictions(model, sp.sectors) %>% tail
combinePredictions = function(model, newData)
{
model.pred = predict(model, newData)
result = as.xts(unlist(model.pred[[1]]))
for(i in 2:length(model.pred))
{
result = cbind(result, as.xts(unlist(model.pred[[i]])))
}
names(result) = names(model.pred)
return(result)
}
combinePredictions(model, sp.sectors) %>% tail
model.sd = function(R, weights, model, newData)
{
newReturns = combinePredictions(model, newData)
newReturns = apply(newReturns, 1, function(x)return(t(weights) %*% x))
return(sd(newReturns))
}
model.sd = function(R, weights, model, newData)
{
newReturns = combinePredictions(model, newData)
newReturns = apply(newReturns[,names(R)], 1, function(x)return(t(weights[names(R)]) %*% x))
return(sd(newReturns))
}
model.sd(R, weights = w, model = model, newData = sp.sectors)
model.annualizedReturn = function(R, weights, model, newData)
{
newReturns = combinePredictions(model, newData)
newReturns = apply(newReturns[,names(R)], 1, function(x)return(t(weights[names(R)]) %*% x))
return(Return.annualized(newReturns))
}
model.ES = function(R, weights, model, newData, p)
{
newReturns = combinePredictions(model, newData)
newReturns = apply(newReturns[,names(R)], 1, function(x)return(t(weights[names(R)]) %*% x))
return(ES(newReturns, p = p))
}
model.ES(R, weights = w, model = model, newData = sp.sectors, p=0.98)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
factors = sp.sectors
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "subsets", window = nrow(R), on = "days")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.annualizedReturn"
risk.func = "model.ES"
risk.param = 0.98
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func, arguments = list(model = model, newData = factors, p=risk.param))
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = list(model = model, newData = factors))
opt_RiskRet = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
opt_RiskRet
plot(opt_RiskRet, risk.col = "model.ES", return.col = "model.annualizedReturn", neighbors = 100)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = apply.weekly(R, Return.cumulative)[-1,]
factors = aapply.weekly(sp.sectors, Return.cumulative)[-1,]
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "subsets", window = nrow(R), on = "weeks")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.annualizedReturn"
risk.func = "model.ES"
risk.param = 0.98
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func, arguments = list(model = model, newData = factors, p=risk.param))
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = list(model = model, newData = factors))
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
DrawdownDeviation(R)
model
DrawdownDeviation(combinePredictions(model, sp.sectors))
maxDrawdown(combinePredictions(model, sp.sectors))
cp = combinePredictions(model, sp.sectors)
charts.PerformanceSummary(cp$Apis)
charts.PerformanceSummary(cp$BlueJay)
charts.PerformanceSummary(cp$BoardmanBay)
charts.PerformanceSummary(cp$Coe)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = apply.weekly(R, Return.cumulative)[-1,]
factors = aapply.weekly(sp.sectors, Return.cumulative)[-1,]
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "weeks")
model = model[[length(model)]]
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = apply.weekly(R, Return.cumulative)[-1,]
factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "weeks")
model = model[[length(model)]]
cp = combinePredictions(model, sp.sectors)
charts.PerformanceSummary(cp$BoardmanBay)
charts.PerformanceSummary(cp$Coe)
model
charts.PerformanceSummary(cp$Apis)
charts.PerformanceSummary(cp$BlueJay)
charts.PerformanceSummary(cp$ISF)
charts.PerformanceSummary(cp$BoardmanBay)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = model[[length(model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
cp = combinePredictions(model, sp.sectors)
charts.PerformanceSummary(cp$BoardmanBay)
charts.PerformanceSummary(cp$ISF)
charts.PerformanceSummary(cp$BlueJay)
model
maxDrawdown(cp)
model
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
model
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments))
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
opt_RiskRet_w
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 15)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 150)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 50)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-1:2,]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
# R = apply.weekly(R, Return.cumulative)[-1,]
# factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 50)
opt_RiskRet_w
head(R)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 50)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
R = apply.weekly(R, Return.cumulative)
factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "weeks")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 10000, trace = T)
opt_RiskRet_w
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
R = apply.weekly(R, Return.cumulative)
factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "weeks")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "full_investment")
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 30000, trace = T)
opt_RiskRet_w
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 50)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
R = apply.weekly(R, Return.cumulative)
factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "weeks")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 30000, trace = T)
opt_RiskRet_w
opt_RiskRet_w
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 50)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 500)
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 1000)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
#R = apply.weekly(R, Return.cumulative)
#factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
# model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "mean"
return.arguments = list()
risk.func = "ETL"
risk.arguments = list(p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 30000, trace = T)
opt_RiskRet_w
plot(opt_RiskRet_w, risk.col = "ETL", return.col = "mean", neighbors = 1000)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
#R = apply.weekly(R, Return.cumulative)
#factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
factors = sp.sectors
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
#model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.ES"
return.arguments = list(model = model, newData = factors)
risk.func = "model.annualizedReturn"
risk.arguments = list(model = model, newData = factors, p=0.98)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "DEoptim", trace = T)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
#R = apply.weekly(R, Return.cumulative)
#factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
factors = sp.sectors
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "stepwise", window = nrow(R), on = "days")
#model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.ES"
return.arguments = list(model = model, newData = factors, p=0.98)
risk.func = "model.annualizedReturn"
risk.arguments = list(model = model, newData = factors)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "DEoptim", trace = T)
model
combinePredictions(model, sp.sectors)
combinePredictions(model, sp.sectors) %>% head
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
#R = apply.weekly(R, Return.cumulative)
#factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
factors = sp.sectors
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
#model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.ES"
return.arguments = list(model = model, newData = factors, p=0.98)
risk.func = "model.annualizedReturn"
risk.arguments = list(model = model, newData = factors)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "DEoptim", trace = T)
R = subs.o$LSE[-which(rowSums(is.na(subs.o$LSE))>0),-6]
R = R[-c(1:2),]
#R = apply.weekly(R, Return.cumulative)
#factors = apply.weekly(sp.sectors, Return.cumulative)[-1,]
factors = sp.sectors
R.model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
#model = rollTsfm2(assets = R, factors = factors[index(R),], variable.selection = "none", window = nrow(R), on = "days")
model = R.model[[length(R.model)]]
betas = model$beta[names(R), names(factors)]
res.sd = model$resid.sd[names(R)]
return.func = "model.ES"
return.arguments = list(model = model, newData = factors, p=0.98)
risk.func = "model.annualizedReturn"
risk.arguments = list(model = model, newData = factors)
fund.names = names(R)
pspec = portfolio.spec(assets = fund.names)
pspec = add.constraint(portfolio = pspec, type = "weight_sum", min_sum = 0.98, max_sum = 1.01)
pspec = add.constraint(portfolio = pspec, type = "long_only")
minRisk = add.objective(portfolio = pspec, type = 'risk', name = risk.func,arguments = risk.arguments )
maxRiskRet = add.objective(portfolio = minRisk, type = "return", name = return.func, arguments = return.arguments)
opt_RiskRet_w = optimize.portfolio(R=R, portfolio = maxRiskRet, optimize_method = "random", search_size = 1000 ,trace = T)
memory.size()
save.image("~/GitHub/R-risk-mgmt/optimizingSession.RData")
savehistory("~/GitHub/R-risk-mgmt/optHist.Rhistory")
